ðŸš© 
cd to current directory
touch a new text file
open it in VS code using code (command)

ðŸš©
CONNECTING TO GIT REPOSITORY - 

â—˜ Connecting Username and email
git config --global user.email "yourEmail.com"

â—˜ git init
â™¦ this is working directory now

â—˜ To track changes we must add it to Staging area
â™¦ git status - get the status of the files in the working directory (untracked or tracked)
â™¦ git add <filename>  - add file to the staging area
â™¦ git add . - adds all files in the working directory

â—˜ Commit a given file
â™¦ git commit -m "commit message" - always write in present tense

â—˜ Get logs of all commits in the working directory
â™¦ git log

â—˜ Revert back to the last git commit
â™¦ git checkout filename


ðŸš©
REMOTE REPOSITORY AND GITHUB

â—˜ Create a new REPOSITORY REMOTELY
â™¦ echo "# Udemy-practice" >> README.md
â™¦ git init
â™¦ git add README.md
â™¦ git commit -m "first commit"
â™¦ git branch -M main
â™¦ git remote add origin https://github.com/AdityaNPatil/Udemy-practice.git
â™¦ git push -u origin main

â—˜ Push Existing Repo from command line
â™¦ git remote add origin https://github.com/AdityaNPatil/Udemy-practice.git  - git remote add <remoteName> <repoUrl>
â™¦ git branch -M main - define main branch name
â™¦ git push -u origin main - Used to link local and github Repo  -- origin = <remoteName> -- main = <branchName>


ðŸš©
GIT INGNORE - which files not to track

.gitignore

â™¦ touch .gitignore
â™¦ open <path to gitignore>
â™¦ (Put name of files that are to be ignored into the gitignore file)
â™¦ *.txt - ignore all txt files
â™¦ https://github.com/github/gitignore

â—˜ Remove everything from staging area
â™¦ git rm --cached -r . 

ðŸš©
CLONING
â—˜ Cloning repo from github to local repo 
â™¦ git clone <url>

â—˜ 
â™¦ https://github.com/MunGell/awesome-for-beginners
â™¦ https://github.com/clupasq/word-mastermind


ðŸš©
BRANCHING AND MERGING

â—˜ To create a new branch to experiment with new features we use BRANCHING
â™¦ git branch <branchname>

â—˜ To merge the new branch with preexisting branch we use MERGING
â™¦ git merge <branchname>

